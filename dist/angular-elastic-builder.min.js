!function(e){"use strict";e.module("angular-elastic-builder",["RecursionHelper","pascalprecht.translate"])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"angular-elastic-builder/BuilderDirective.html",link:function(a){var t=a.data;a.filters=[],a.removeChild=function(e){a.filters.splice(e,1)},a.addRule=function(){a.filters.push({})},a.addGroup=function(){a.filters.push({type:"group",subType:"and",rules:[]})},a.$watch("data.needsUpdate",function(l){l&&(a.filters=e.toFilters(t.query,a.data.fields),a.data.needsUpdate=!1)}),a.$watch("filters",function(l){l&&(t.query=e.toQuery(a.filters,a.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";var a=e.module("angular-elastic-builder");a.directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,a){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"angular-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,l){var n=e.depth=+l.depth,r=e.item;e.getGroupClassName=function(){var e=n;return"group"===r.type&&e++,a(e)}})}}}])}(window.angular),function(e){"use strict";var a=e.module("angular-elastic-builder");a.directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e,a){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"angular-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,l){var n=e.depth=+l.depth,r=e.group;e.addRule=function(){r.rules.push({})},e.addGroup=function(){r.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){r.rules.splice(e,1)},e.getGroupClassName=function(){return a(n+1)}})}}}])}(window.angular),function(e){"use strict";var a=e.module("angular-elastic-builder");a.filter("toArray",function(){return function(a){var t=[];return e.forEach(a,function(e,a){t.push(e)}),t}}),a.directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"angular-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var a=e.elasticFields,t=e.rule.field;if(a&&t)return"boolean"===a[t].subType?"boolean":a[t].type}}}}])}(window.angular),function(e){"use strict";var a=e.module("angular-elastic-builder");a.directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){e.getTemplateUrl=function(){var a=e.type;if(a)return a=a.charAt(0).toUpperCase()+a.slice(1),"angular-elastic-builder/types/"+a+".html"},e.booleans=["angularQueryBuilder.false","angularQueryBuilder.true"],e.booleansOrder=["angularQueryBuilder.true","angularQueryBuilder.false"],e.inputNeeded=function(){var a=["equals","notEquals","gt","gte","lt","lte"];return~a.indexOf(e.rule.subType)}}}}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").run(["$templateCache",function(e){e.put("angular-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="list-group form-inline">\n      <div\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="list-group-item actions">\n        <a class="btn btn-xs btn-primary" title="{{\'angularQueryBuilder.addFilter\' | translate}}" data-ng-click="addRule()">\n          <i class="fa fa-plus"></i> {{\'angularQueryBuilder.addFilter\' | translate}}\n        </a>\n        <a class="btn btn-xs btn-primary" title="{{\'angularQueryBuilder.addGroup\' | translate}} " data-ng-click="addGroup()">\n          <i class="fa fa-list"></i> {{\'angularQueryBuilder.addGroup\' | translate}}\n        </a> \n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("angular-elastic-builder/ChooserDirective.html",'<div\n  class="list-group-item elastic-builder-chooser"\n  data-ng-class="getGroupClassName()">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("angular-elastic-builder/GroupDirective.html",'<div class="elastic-builder-group">\n  <h5>If\n    <select data-ng-model="group.subType" class="form-control">\n      <option value="and">{{\'angularQueryBuilder.all\' | translate}}</option>\n      <option value="or">{{\'angularQueryBuilder.any\' | translate}}</option>\n    </select>\n    {{\'angularQueryBuilder.conditionsMet\' | translate}}\n  </h5>\n  <div\n    data-ng-repeat="rule in group.rules"\n    data-elastic-builder-chooser="rule"\n    data-elastic-fields="elasticFields"\n    data-depth="{{ +depth + 1 }}"\n    data-on-remove="removeChild($index)"></div>\n\n  <div class="list-group-item actions" data-ng-class="getGroupClassName()">\n    <a class="btn btn-xs btn-primary" title="{{\'angularQueryBuilder.addFilter\' | translate}}" data-ng-click="addRule()">\n      <i class="fa fa-plus"></i> {{\'angularQueryBuilder.addFilter\' | translate}}\n    </a>\n    <a class="btn btn-xs btn-primary" title="{{\'angularQueryBuilder.addGroup\' | translate}}" data-ng-click="addGroup()">\n      <i class="fa fa-list"></i> {{\'angularQueryBuilder.addGroup\' | translate}}\n    </a>\n  </div>\n\n  <a class="btn btn-xs btn-danger remover" title="{{\'angularQueryBuilder.removeFilter\' | translate}}" data-ng-click="onRemove()">\n    <i class="fa fa-minus"></i> {{\'angularQueryBuilder.removeFilter\' | translate}}\n  </a>\n</div>\n'),e.put("angular-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <!--select ng-if="elasticBuilderSortableSelect" class="form-control" style="max-width:100%" data-ng-model="rule.field" \n  data-ng-options="value.key as value.label | translate for (key, value) in elasticFields | toArray | orderBy:\'label\'"></select-->\n  <select class="form-control" style="max-width:100%" data-ng-model="rule.field" \n  data-ng-options="value.key as value.label | translate for (key, value) in elasticFields"></select>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <a class="btn btn-xs btn-danger remover" title="{{\'angularQueryBuilder.removeFilter\' | translate}}" data-ng-click="onRemove()">\n    <i class="fa fa-minus"></i>  {{\'angularQueryBuilder.removeFilter\' | translate}}\n  </a>\n\n</div>\n'),e.put("angular-elastic-builder/types/Boolean.html",'<span class="boolean-rule">\n  {{\'angularQueryBuilder.equals\' | translate}}\n\n  <!-- This is a weird hack to make sure these are numbers -->\n  <select\n    data-ng-model="rule.value"\n    class="form-control"\n    data-ng-options="booleans.indexOf(choice) as choice | translate for choice in booleansOrder">\n  </select>\n</span>\n'),e.put("angular-elastic-builder/types/Date.html",'<span class="date-rule">\n  <select data-ng-model="rule.subType" class="form-control">\n\n    <optgroup label="{{\'angularQueryBuilder.optGroupGeneric\' | translate}}">\n      <option value="exists">{{\'angularQueryBuilder.exists\' | translate}}</option>\n      <option value="notExists">! {{\'angularQueryBuilder.exists\' | translate}}</option>\n    </optgroup>\n  </select>\n\n</span>\n'),e.put("angular-elastic-builder/types/Multi.html",'<span class="multi-rule">\n  <span data-ng-repeat="choice in guide.choices">\n    <label class="checkbox">\n      <input type="checkbox" data-ng-model="rule.values[choice]">\n      {{ choice }}\n    </label>\n  </span>\n</span>\n'),e.put("angular-elastic-builder/types/Number.html",'<span class="number-rule">\n  <select data-ng-model="rule.subType" class="form-control">\n    <optgroup label="{{\'angularQueryBuilder.optGroupNumeral\' | translate}}">\n      <option value="equals">=</option>\n      <option value="gt">&gt;</option>\n      <option value="gte">&ge;</option>\n      <option value="lt">&lt;</option>\n      <option value="lte">&le;</option>\n    </optgroup>\n\n    <optgroup label="{{\'angularQueryBuilder.optGroupGeneric\' | translate}}">\n      <option value="exists">{{\'angularQueryBuilder.exists\' | translate}}</option>\n      <option value="notExists">! {{\'angularQueryBuilder.exists\' | translate}}</option>\n    </optgroup>\n  </select>\n\n  <!-- Range Fields -->\n  <input data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="number"\n    min="{{ guide.minimum }}"\n    max="{{ guide.maximum }}">\n</span>\n'),e.put("angular-elastic-builder/types/Select.html",'<span class="select-rule">\r\n 	<select data-ng-model="rule.value" class="form-control" style="max-width:100% !important" \r\n 	data-ng-options="value.value as value.label | translate disable when value.disabled == \'true\' for value in guide.choices | orderBy:[\'-disabled\',\'label\']">\r\n	</select>\r\n</span>\r\n'),e.put("angular-elastic-builder/types/Term.html",'<span class="elastic-term">\n  <select data-ng-model="rule.subType" class="form-control">\n    <!-- Term Options -->\n    <optgroup label="{{\'angularQueryBuilder.optGroupText\' | translate}}">\n      <option value="equals">{{\'angularQueryBuilder.equals\' | translate}}</option>\n      <option value="notEquals">! {{\'angularQueryBuilder.equals\' | translate}}</option>\n    </optgroup>\n\n    <!-- Generic Options -->\n    <optgroup label="{{\'angularQueryBuilder.optGroupGeneric\' | translate}}">\n      <option value="exists">{{\'angularQueryBuilder.exists\' | translate}}</option>\n      <option value="notExists">! {{\'angularQueryBuilder.exists\' | translate}}</option>\n    </optgroup>\n\n  </select>\n  <input\n    data-ng-if="inputNeeded()"\n    class="form-control"\n    data-ng-model="rule.value"\n    type="text">\n</span>\n')}])}(window.angular),function(e){"use strict";e.module("angular-elastic-builder").factory("groupClassHelper",function(){return function(e){var a=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return a[e%a.length]}})}(window.angular),function(e){"use strict";function a(e,a){var t=e.map(l.bind(e,a));return t}function t(e,a){var t=e.map(n.bind(e,a)).filter(function(e){return!!e});return t}function l(e,a,t){t!==!1&&(t=!0);var n=Object.keys(a)[0],i={or:"group",and:"group",range:"number"},u=i[n]||"item",s=r(u);switch(n){case"or":case"and":s.rules=a[n].map(l.bind(a,e)),s.subType=n;break;case"missing":case"exists":s.field=a[n].field,s.subType={exists:"exists",missing:"notExists"}[n],delete s.value;break;case"term":case"terms":s.field=Object.keys(a[n])[0];var o=e[Object.keys(a[n])[0]];if("multi"===o.type){var d=a[n][s.field];"string"==typeof d&&(d=[d]),s.values=o.choices.reduce(function(e,l){return e[l]=t===a[n][s.field].indexOf(l)>-1,e},{})}else s.subType=t?"equals":"notEquals",s.value=a[n][s.field],"number"==typeof s.value&&(s.subType="boolean");break;case"range":s.field=Object.keys(a[n])[0],s.subType=Object.keys(a[n][s.field])[0],s.value=a[n][s.field][s.subType];break;case"not":s=l(e,a[n].filter,!1);break;default:s.field=Object.keys(a[n])[0]}return s}function n(e,a){var t={};if("group"===a.type)return t[a.subType]=a.rules.map(n.bind(a,e)).filter(function(e){return!!e}),t;var l=a.field,r=e[l];if(l){switch(r.type){case"term":if("boolean"===r.subType&&(a.subType="boolean"),!a.subType)return;switch(a.subType){case"equals":case"boolean":if(void 0===a.value)return;t.term={},t.term[l]=a.value;break;case"notEquals":if(void 0===a.value)return;t.not={filter:{term:{}}},t.not.filter.term[l]=a.value;break;case"exists":t.exists={field:l};break;case"notExists":t.missing={field:l};break;default:throw new Error("unexpected subtype "+a.subType)}break;case"number":t.range={},t.range[l]={},t.range[l][a.subType]=a.value;break;case"text":t.query_string={},t.query_string.query=a.value;break;case"date":if("exists"===a.subType)t.exists={field:l};else{if("notExists"!==a.subType)throw new Error("unexpected subtype");t.missing={field:l}}break;case"multi":t.terms={},t.terms[l]=Object.keys(a.values||{}).reduce(function(e,t){return a.values[t]&&e.push(t),e},[]);break;case"select":t.term={},t.term[l]=a.value;break;default:throw new Error("unexpected type")}return t}}function r(a){var t={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""},number:{field:"",subType:"",value:null}};return e.copy(t[a])}e.module("angular-elastic-builder").factory("elasticQueryService",[function(){return{toFilters:a,toQuery:t}}])}(window.angular);